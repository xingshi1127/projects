# Randomly generates a binary search tree with values from 0 up to 9, and displays it growing up.



import sys
from random import seed, choice
from binary_tree import *
alist = []
blist = []
def currentnum(tree, n, height):
    if n > height:
        return
    if tree.value is None:
        for i in range(2 ** (height - n + 1) - 1):
            alist.append('\n')
    if tree.value is not None:
        currentnum(tree.left_node,n + 1, height)
        alist.append([tree.value,n])
        currentnum(tree.right_node,n + 1, height)
    
        
    

def print_tree_growing_down(tree):
    currentnum(tree,0,tree.height())
    y = 0
    temp = 0
    for i in range(len(alist)):
        if alist[i] != '\n':
            alist[i].append(i)
            y = i
            if alist[i][2] > temp:
                temp = alist[i][2]
    blist = [[' ']*(temp+1) for x in range(tree.height()+1)]
    for i in alist:
        if i != '\n':
            blist[i[1]][i[2]] = i[0]
    blist = list(reversed(blist))
    for i in blist:
        string = ''
        for j in i:
            string += str(j)
        print(string)
    
    # Replace pass above with your code

# Possibly write additional function(s)
        

provided_input = input('Enter two integers, with the second one between 0 and 10: ')
provided_input = provided_input.split()
if len(provided_input) != 2:
    print('Incorrect input, giving up.')
    sys.exit()
try:
    seed_arg = int(provided_input[0])
    nb_of_nodes = int(provided_input[1])
    if nb_of_nodes < 0 or nb_of_nodes > 10:
        raise ValueError
except ValueError:
    print('Incorrect input, giving up.')
    sys.exit()

seed(seed_arg)
data_pool = list(range(nb_of_nodes))
tree = BinaryTree()
for _ in range(nb_of_nodes):
    datum = choice(data_pool)
    tree.insert_in_bst(datum)
    height = tree
    data_pool.remove(datum)
print_tree_growing_down(tree)
           
